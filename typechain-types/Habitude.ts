/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface HabitudeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "challenges"
      | "claimPointsForHabit"
      | "claimStakedAmount"
      | "completeChallenge"
      | "completeHabit"
      | "createChallenge"
      | "createHabit"
      | "generalHabits"
      | "getChallengeParticipants"
      | "habits"
      | "joinChallenge"
      | "owner"
      | "userPoints"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "challenges", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimPointsForHabit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimStakedAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "completeChallenge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "completeHabit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createChallenge",
    values: [string, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createHabit",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generalHabits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getChallengeParticipants",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "habits", values: [string]): string;
  encodeFunctionData(
    functionFragment: "joinChallenge",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userPoints",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "challenges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPointsForHabit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimStakedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeHabit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createHabit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generalHabits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChallengeParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "habits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "joinChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userPoints", data: BytesLike): Result;
}

export interface Habitude extends BaseContract {
  connect(runner?: ContractRunner | null): Habitude;
  waitForDeployment(): Promise<this>;

  interface: HabitudeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  challenges: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, boolean] & {
        name: string;
        totalStackAmount: bigint;
        perPersonStake: bigint;
        completed: boolean;
      }
    ],
    "view"
  >;

  claimPointsForHabit: TypedContractMethod<
    [_habitName: string],
    [void],
    "nonpayable"
  >;

  claimStakedAmount: TypedContractMethod<
    [_challengeName: string],
    [void],
    "nonpayable"
  >;

  completeChallenge: TypedContractMethod<
    [_challengeName: string],
    [void],
    "nonpayable"
  >;

  completeHabit: TypedContractMethod<
    [_habitName: string],
    [void],
    "nonpayable"
  >;

  createChallenge: TypedContractMethod<
    [
      _name: string,
      _totalStackAmount: BigNumberish,
      _perPersonStake: BigNumberish,
      _habitsIncluded: string[]
    ],
    [void],
    "payable"
  >;

  createHabit: TypedContractMethod<
    [
      _name: string,
      _goal: BigNumberish,
      _target: BigNumberish,
      _remainder: BigNumberish,
      _points: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  generalHabits: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, bigint, bigint] & {
        name: string;
        goal: bigint;
        target: bigint;
        remainder: bigint;
        points: bigint;
      }
    ],
    "view"
  >;

  getChallengeParticipants: TypedContractMethod<
    [_challengeName: string],
    [string[]],
    "view"
  >;

  habits: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, bigint, bigint] & {
        name: string;
        goal: bigint;
        target: bigint;
        remainder: bigint;
        points: bigint;
      }
    ],
    "view"
  >;

  joinChallenge: TypedContractMethod<
    [_challengeName: string],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  userPoints: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "challenges"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, boolean] & {
        name: string;
        totalStackAmount: bigint;
        perPersonStake: bigint;
        completed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimPointsForHabit"
  ): TypedContractMethod<[_habitName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimStakedAmount"
  ): TypedContractMethod<[_challengeName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeChallenge"
  ): TypedContractMethod<[_challengeName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeHabit"
  ): TypedContractMethod<[_habitName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createChallenge"
  ): TypedContractMethod<
    [
      _name: string,
      _totalStackAmount: BigNumberish,
      _perPersonStake: BigNumberish,
      _habitsIncluded: string[]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createHabit"
  ): TypedContractMethod<
    [
      _name: string,
      _goal: BigNumberish,
      _target: BigNumberish,
      _remainder: BigNumberish,
      _points: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "generalHabits"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, bigint, bigint] & {
        name: string;
        goal: bigint;
        target: bigint;
        remainder: bigint;
        points: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getChallengeParticipants"
  ): TypedContractMethod<[_challengeName: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "habits"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, bigint, bigint] & {
        name: string;
        goal: bigint;
        target: bigint;
        remainder: bigint;
        points: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinChallenge"
  ): TypedContractMethod<[_challengeName: string], [void], "payable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userPoints"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  filters: {};
}
